Документация к элементарному графическому редактору
===============================================

Введение
--------
Данное приложение представляет собой элементарный графический редактор, предназначенный для демонстрации построения графических примитивов. Приложение позволяет работать как с отрезками, так и с кривыми второго порядка. Помимо традиционных алгоритмов построения отрезков (алгоритм ЦДА, целочисленный алгоритм Брезенхэма, алгоритм Ву), реализованы новые функции для построения следующих кривых второго порядка:
  - Окружность (по алгоритму Брезенхэма с отражениями)
  - Эллипс (алгоритм средней точки с разбиением на две области)
  - Гипербола (параметрическое построение с использованием гиперболических функций, с выбором направления "horizontal" или "vertical")
  - Парабола (вертикальная парабола через вершину и вторую точку, где коэффициент a = (ey - yc)/((ex - xc)^2))

Режим отладки
-------------
Приложение поддерживает режим отладки, при котором после построения примитива открывается отдельное окно с таблицей шагов вычислений. Для отрезков таблицы выводятся записи с 4 или 6 колонками, а для кривых – расширенная таблица с 9 колонками, содержащая следующие поля:
  Шаг
  di — текущее значение параметрической величины (например, ошибка или смещение)
  δ  — разность между значениями следующего шага и текущим
  δ* — дополнительная корректировка (обычно 0.0)
  Пиксель — выбранный пиксель (например, одна из симметричных точек)
  x — вычисленная координата x
  y — вычисленная координата y
  di+1 — значение для следующего шага
  Plot (x, y) — отображаемые (округленные) координаты

Алгоритмы построения линий
--------------------------
1. Алгоритм ЦДА (Digital Differential Analyzer):
   - Работает на основе вычисления приращений по осям X и Y.
   - Делит отрезок на равные временные шаги и вычисляет вещественные координаты приближенной линии.
   - Использует операции с плавающей точкой.
   - Отладочная таблица содержит поля: Итерация, x, y, Отобр. координаты.

2. Алгоритм Брезенхэма:
   - Основан на целочисленной арифметике и понятии ошибки (difference).
   - Пиксели выбираются на основе минимизации накопленной ошибки.
   - Таблица отладки выводит: Итерация, x, y, e (ошибка до корректировки), e′ (ошибка после корректировки), Отобр. координаты.

3. Алгоритм Ву:
   - Применяет антиалиасинг, сглаживая линии за счет изменения интенсивности пикселей.
   - Таблица отладки аналогична алгоритму Брезенхэма: Итерация, x, y, e (интенсивность для верхнего пикселя), e′ (интенсивность для нижнего пикселя), Отобр. координаты.

Построение кривых второго порядка
---------------------------------
1. Окружность:
   - Строится по алгоритму Брезенхэма с использованием отражений для получения восьми симметричных точек.
   - Отладочная таблица (при debug=True) выводит записи вида:
     (Итерация, x, y, d, Отобр. координаты)

2. Эллипс:
   - Эллипс задается центром (cx, cy) и полуосями (rx, ry). Построение осуществляется по алгоритму средней точки с разделением на две области (область 1 и область 2).
   - В режиме отладки формируется расширенная таблица с 9 колонками со следующими полями:
     Шаг | di | δ | δ* | Пиксель | x | y | di+1 | Plot (x, y)
     Где di представлено, например, как смещение y относительно центра, а δ – разность между последующими значениями.

3. Гипербола:
   - Для гиперболы определяется центр (xc, yc) и полуоси:
       a = |x2 - xc| (горизонтальная полуось),
       b = |y2 - yc| (вертикальная полуось).
   - Направление гиперболы выбирается в зависимости от требуемого вида:
       "horizontal" – уравнение: (x - xc)^2/a^2 - (y - yc)^2/b^2 = 1,
       "vertical" – уравнение: (y - yc)^2/b^2 - (x - xc)^2/a^2 = 1.
   - При режиме отладки формируется таблица с полями:
     (Шаг, di, δ, δ*, Пиксель, x, y, di+1, Plot (x, y))
     Для горизонтального направления di берется, например, как x координата правой верхней точки, а для вертикального – как y координата.

4. Парабола:
   - Строится вертикальная парабола через вершину (xc, yc) и вторую точку (ex, ey).
   - Уравнение:
     y = a * (x - xc)^2 + yc,
     где коэффициент a = (ey - yc)/((ex - xc)^2).
   - Режим отладки формирует таблицу с 9 колонками:
     (Шаг, di, δ, δ*, Пиксель, x, y, di+1, Plot (x, y))
     Где di определяется как смещение y относительно центра (y - yc), а δ – разница между текущим и следующим значением.

Построение и редактирование кривых
----------------------------------------------------------
1. Форма Эмирта
    Форма Эмирта основана на использовании векторов касательных, которые задаются разностями координат между парой точек. Для построения кривой по форме Эмирта необходимо задать ровно 4 опорные точки. Первая и вторая точки определяют концы интервала, а третья и четвертая используются для вычисления касательных в начальной и конечной точках соответственно.

    При построении:
        - Пользователь кликом добавляет опорные точки в рабочее пространство.
        - После установки 4-х точек автоматически запускается функция отрисовки, которая вычисляет и выводит кривую по формулам интерполяции Эмирта.

    При редактировании:
        - Режим отладки позволяет выбрать любую опорную точку (определение осуществляется через функцию find_selected_control_point) и переместить её.
    - При изменении положения контрольной точки пересчитывается кривая, а функция update_curve(curve_index) обновляет отрисовку формы Эмирта с учетом новых координат.

2. Форма Безье
    Форма Безье также требует ровно 4 опорных точки. Кривая Безье определяется полиномом третьей степени, а ее форма полностью задается координатами этих 4-х точек. При построении кривая плавно проходит через начальную и конечную точки, а средние точки определяют кривизну.

    При построении:
        - Пользователь задает 4 опорные точки.
        - После установки всех 4-х точек происходит построение кривой, используя алгоритм отрисовки, который интерполирует значения по полиному Безье.

    При редактировании:
        - Режим отладки позволяет выбирать и перемещать любую из 4-х опорных точек.
    - При изменении координат, функция update_curve(curve_index) пересчитывает кривую Безье, обновляя вид кривой в режиме реального времени с учетом новых положений точек.

3. B-сплайн
    B-сплайн требует минимум 4 опорные точки, но позволяет использовать больше для получения более сглаженной и гибкой кривой. В данной реализации кривая строится с использованием алгоритма B‑сплайна, который задается через набор контрольных точек и вычисляемый вектор узлов.

    При построении:
        - Пользователь может задавать больше 4 опорных точек.
        - После достижения минимального количества точек (4 и более), функция отрисовки автоматически строит сглаженную кривую по алгоритму B‑сплайна.

    При редактировании:
        - Режим отладки позволяет выбирать любую опорную точку среди всех заданных для B‑сплайна.
        - При перемещении контрольной точки пересчитывается и отрисовывается кривая, используя функцию update_curve(curve_index), которая берет актуальные координаты опорных точек и перерисовывает B‑сплайн с учетом всех заданных точек.

Как использовать приложение
----------------------------
1. Запуск приложения:
   Запустите программу с помощью команды "python main.py". Главное окно откроется и будет содержать канву для рисования, меню, панель инструментов и строку состояния.

2. Меню "Файл":
   - Очистить экран: Удаляет все объекты, нарисованные на канве.
   - Выход: Завершает работу приложения.

3. Построение отрезков:
   - Выберите нужный алгоритм через выпадающее меню "Отрезок".
   - Выполните два клика: первый задает начальную точку, второй - конечную.
   - После второго клика отрезок будет построен, а в режиме отладки откроется окно с таблицей вычислений.

4. Построение кривых второго порядка:
   - Выберите тип кривой из меню "Линии второго порядка" на панели инструментов:
       - Окружность
       - Эллипс
       - Гипербола
       - Парабола
   - Укажите опорные точки в зависимости от выбранной кривой (например, для эллипса – центр и полуоси; для гиперболы – центр и вторая точка, определяющая полуоси; для параболы – вершина и вторая точка).
   - При построении кривой, если включен режим отладки, откроется дополнительное окно с расширенной таблицей шагов вычислений (9 колонок).

5. Режим отладки:
   - Нажмите кнопку "Отладка", чтобы включить или отключить этот режим.
   - После построения примитива откроется окно с таблицей, демонстрирующей пошаговую работу алгоритма.

6. Кнопка "Курсор":
   Переводит приложение в режим перемещения, временно отключая построение примитивов.

7. Меню "Помощь":
   Выберите пункт "Документация", чтобы открыть данное руководство в отдельном окне.

Требования к системе
---------------------
- Язык: Python 3.x
- Библиотека: Tkinter (обычно входит в стандартную поставку Python)
- Исходные файлы: main.py, gui.py, intervals.py, documentation.txt

Заключение
-----------
Данное приложение служит учебным пособием для изучения алгоритмов построения графических примитивов в компьютерной графике. Редактор позволяет на практике увидеть различия между алгоритмами построения отрезков и кривых второго порядка. Режим отладки помогает проследить пошаговую логику каждого алгоритма через подробные таблицы вычислений.

Автор: Малинецкая Диана Дмитриевна
Дата: 14.03.2025
